import logging
from datetime import datetime

from aiogram import types, F, Bot
from aiogram.dispatcher.dispatcher import Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config.config import VERSION
from database import SessionLocal, get_all, check_and_create_user, get_by_name, get_by_id, \
    check_password_and_expiration, create_item, Users
from utils.cameras import save_video
from utils.keyboards import get_courts_keyboard, get_saverec_keyboard, get_back_keyboard
from utils.states import SetupFSM
from texts import *

logger = logging.getLogger(__name__)


def register_handlers(dp: Dispatcher, bot: Bot):
    @dp.message(lambda message: message.text == "üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ä—Ç–∞")
    async def process_back_to_court_button(message: types.Message, state: FSMContext):
        local_session = SessionLocal()
        check_and_create_user(local_session, message.from_user.id)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç:",
            reply_markup=get_courts_keyboard(get_all(SessionLocal(), 'courts'))
        )
        await state.set_state(SetupFSM.select_court)

    @dp.message(F.text, SetupFSM.select_court)
    async def process_court_selection(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        local_session = SessionLocal()
        check_and_create_user(local_session, user_id)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ—Ä—Ç–∞ –∏–∑ callback_data
        court_name = message.text
        court = get_by_name(local_session, 'courts', court_name)

        if not court:
            await message.answer("–ö–æ—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_by_id(local_session, 'users', user_id)

        if user.selected_court_id:
            logger.debug(user.selected_court_id, court.id, user.current_pasword, user.court.current_password)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –∫–æ—Ä—Ç, –∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user.selected_court_id == court.id and user.current_pasword == user.court.current_password:
            await message.answer(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç: {court.name}\n",
                reply_markup=get_saverec_keyboard()
            )
            await state.clear()

            return

        user.selected_court_id = court.id
        local_session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        await message.answer(please_enter_password_text,
                             reply_markup=get_back_keyboard()
                             )
        await state.set_state(SetupFSM.input_password)

    @dp.callback_query(SetupFSM.input_password)
    async def process_back_button(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.answer(
            start_text,
            reply_markup=get_courts_keyboard(get_all(SessionLocal(), 'courts'))
        )
        await state.set_state(SetupFSM.select_court)

    @dp.message(F.text, SetupFSM.input_password)
    async def process_input_password(message: types.Message, state: FSMContext):
        local_session = SessionLocal()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = get_by_id(local_session, 'users', message.from_user.id)
        if not user or not user.selected_court_id:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ç.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç
        court = user.court
        if not court:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        if court.current_password == message.text:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
            user.access_level = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            user.current_pasword = message.text
            local_session.commit()
            await message.answer(
                right_password_text,
                reply_markup=get_saverec_keyboard()
            )
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
            await message.answer(wrong_password_text)

    async def save_and_send_video(user: Users, message: types.Message):
        await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ...")
        video_file = await save_video(user, message)

        sent_message = await bot.send_video(chat_id=message.chat.id, video=video_file)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
        create_item(
            SessionLocal(), 'videos',
            video_id=sent_message.video.file_id,
            timestamp=datetime.now(),
            user_id=message.from_user.id,
            court_id=user.selected_court_id
        )

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    @dp.message(Command("saverec"))
    @dp.message(lambda message: message.text == "üé• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ")
    async def cmd_saverec(message: types.Message, state: FSMContext):
        local_session = SessionLocal()
        check_and_create_user(local_session, message.from_user.id)
        user = get_by_id(local_session, 'users', message.from_user.id)

        if not user or user.access_level < 1:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
            return

        password_check, expiration = check_password_and_expiration(local_session, user)
        if not password_check:
            await message.answer("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                                 reply_markup=get_back_keyboard())
            await state.set_state(SetupFSM.input_password)
            return

        if VERSION != "test":
            await save_and_send_video(user, message)

        t_left = expiration - datetime.now()  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è
        await message.answer(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                             f"–î–æ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å: "
                             f"{t_left.seconds // 60 // 60} —á. "
                             f"{t_left.seconds // 60 % 60} –º–∏–Ω. {t_left.seconds % 60} —Å.",
                             reply_markup=get_saverec_keyboard())

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
    @dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ")
    async def show_videos(message: types.Message):
        local_session = SessionLocal()
        check_and_create_user(local_session, message.from_user.id)
        user = get_by_id(local_session, 'users', message.from_user.id)
        if not user or user.access_level < 1:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ.")
            return

        videos = get_all(local_session, 'videos')
        if not videos:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ.")
            return

        response = "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ:\n"
        for video in videos:
            response += f"/show_video_{video.id} - {video.description} ({video.timestamp})\n"
        await message.answer(response)

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    @dp.message(F.text.regexp(r'^/show_video_(\d+)$'))
    async def show_specific_video(message: types.Message):
        local_session = SessionLocal()
        check_and_create_user(local_session, message.from_user.id)
        video_id = int(message.text.split("_")[-1])
        video = get_by_id(local_session, 'videos', video_id)
        if not video:
            await message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        await bot.send_video(chat_id=message.chat.id, video=video.video_id)
