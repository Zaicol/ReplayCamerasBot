import asyncio
import logging
import random
import string
import subprocess
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
import cv2
import time
from collections import deque
from models import *
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import threading
from icecream import ic
from texts import *
from utils.states import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ")]],
    resize_keyboard=True
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏
BUFFER_DURATION = 40  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É—Ñ–µ—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
FPS = 20  # –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
MAX_FRAMES = BUFFER_DURATION * FPS  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ


def check_and_create_user(user_id: int):
    with Session() as local_session:
        user = local_session.query(Users).filter_by(id=user_id).first()
        if not user:
            user = Users(id=user_id, access_level=2)
            local_session.add(user)
            local_session.commit()
            local_session.refresh(user)
        return user


def generate_password():
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(6))


def check_and_set_new_court_password(court_input: Courts):
    with Session() as local_session:
        court = local_session.query(Courts).filter_by(id=court_input.id).first()
        ic(court.password_expiration_date, court.password_expiration_date < datetime.now())
        if court.password_expiration_date < datetime.now():
            new_password = generate_password()
            court.previous_password = court.current_password
            court.current_password = new_password
            # TODO: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è
            court.password_expiration_date = datetime.now() + timedelta(days=1)
            local_session.commit()
            local_session.refresh(court)


def check_password_and_expiration(user: Users) -> tuple[bool, datetime | None]:
    if user.court:
        check_and_set_new_court_password(user.court)
        return user.court.current_password == user.current_pasword, user.court.password_expiration_date
    return False, None


def get_courts_keyboard(courts_list: list[Courts]):
    buttons = [
        KeyboardButton(text=court.name)
        for court in courts_list
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=[buttons])
    return keyboard


def get_back_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ä—Ç–∞")]])
    return keyboard


def get_saverec_keyboard():
    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üé• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ"),
                                              KeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ä—Ç–∞")]],
                                   resize_keyboard=True)
    return keyboard


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ –≤ –±—É—Ñ–µ—Ä
def capture_video(camera: Cameras, buffer: deque):
    # RTSP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
    rtsp_url = f"rtsp://{camera.login}:{camera.password}@{camera.ip}:{camera.port}/cam/realmonitor?channel=1&subtype=0"

    cap = cv2.VideoCapture(rtsp_url)
    if not cap.isOpened():
        logging.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫—É.")
        return

    while True:
        ret, frame = cap.read()
        if not ret or frame is None:
            logging.error("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            time.sleep(1)
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ –±—É—Ñ–µ—Ä
        buffer.append(frame)


with Session() as session:
    cameras = session.query(Cameras).all()

buffers = {camera.id: deque(maxlen=MAX_FRAMES) for camera in cameras}

for camera in cameras:
    # –ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    capture_thread = threading.Thread(target=capture_video, args=(camera, buffers[camera.id]), daemon=True)
    capture_thread.start()


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    check_and_create_user(message.from_user.id)
    local_session = Session()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—Ä—Ç–æ–≤
    courts_list = local_session.query(Courts).all()
    if not courts_list:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        start_text,
        reply_markup=get_courts_keyboard(courts_list)
    )
    await state.set_state(SetupFSM.select_court)


@dp.message(lambda message: message.text == "üîô –ö –≤—ã–±–æ—Ä—É –∫–æ—Ä—Ç–∞")
async def process_back_to_court_button(message: types.Message, state: FSMContext):
    check_and_create_user(message.from_user.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç:",
        reply_markup=get_courts_keyboard(Session().query(Courts).all())
    )
    await state.set_state(SetupFSM.select_court)


@dp.callback_query(SetupFSM.select_court)
async def process_court_selection(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    check_and_create_user(user_id)
    local_session = Session()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ—Ä—Ç–∞ –∏–∑ callback_data
    court_name = message.data
    court = local_session.query(Courts).filter_by(name=court_name).first()

    if not court:
        await message.answer("–ö–æ—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = local_session.query(Users).filter_by(id=user_id).first()

    if user.selected_court_id:
        ic(user.selected_court_id, court.id, user.current_pasword, user.court.current_password)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –∫–æ—Ä—Ç, –∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if user.selected_court_id == court.id and user.current_pasword == user.court.current_password:
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –∫–æ—Ä—Ç: {court.name}\n",
            reply_markup=get_saverec_keyboard()
        )
        await state.clear()

        return

    user.selected_court_id = court.id
    local_session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
    await message.answer(please_enter_password_text,
                         reply_markup=get_back_keyboard()
                         )
    await state.set_state(SetupFSM.input_password)


@dp.callback_query(SetupFSM.input_password)
async def process_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        start_text,
        reply_markup=get_courts_keyboard(Session().query(Courts).all())
    )
    await state.set_state(SetupFSM.select_court)


@dp.message(F.text, SetupFSM.input_password)
async def process_input_password(message: types.Message, state: FSMContext):
    local_session = Session()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = local_session.query(Users).filter_by(id=message.from_user.id).first()
    if not user or not user.selected_court_id:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ç.")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç
    court = user.court
    if not court:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    if court.current_password == message.text:
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
        user.access_level = 1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        user.current_pasword = message.text
        local_session.commit()
        await message.answer(
            right_password_text,
            reply_markup=get_saverec_keyboard()
        )
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π
        await message.answer(wrong_password_text)


async def save_and_send_video(user: Users, message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –±—É—Ñ–µ—Ä –≤–∏–¥–µ–æ
    temp_video_path = f"temp_video.mp4"

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –±—É—Ñ–µ—Ä–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    buffer_id = user.court.cameras[0].id
    buffer_copy = list(buffers[buffer_id])  # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞

    if len(buffer_copy) == 0:
        await message.answer("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
    frame_width = buffer_copy[0].shape[1]
    frame_height = buffer_copy[0].shape[0]

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(temp_video_path, fourcc, FPS, (frame_width, frame_height))

    for frame in buffer_copy:  # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–ø–∏–∏ –±—É—Ñ–µ—Ä–∞
        out.write(frame)

    out.release()

    # –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ H.264
    transcoded_video_path = f"transcoded_temp_video.mp4"
    subprocess.run([
        "ffmpeg",
        "-i", temp_video_path,
        "-c:v", "libx264",  # –ö–æ–¥–µ–∫ H.264
        "-preset", "fast",
        transcoded_video_path
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram
    video_file = FSInputFile(transcoded_video_path)
    sent_message = await bot.send_video(chat_id=message.chat.id, video=video_file)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    with Session() as local_session:
        video = Videos(
            video_id=sent_message.video.file_id,
            timestamp=datetime.now(),
            user_id=message.from_user.id,
            court_id=user.selected_court_id
        )
        local_session.add(video)
        local_session.commit()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
@dp.message(Command("saverec"))
@dp.message(lambda message: message.text == "üé• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ")
async def cmd_saverec(message: types.Message, state: FSMContext):
    check_and_create_user(message.from_user.id)
    with Session() as local_session:
        user = local_session.query(Users).filter_by(id=message.from_user.id).first()

        if not user or user.access_level < 1:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ.")
            return

        password_check, expiration = check_password_and_expiration(user)
        if not password_check:
            await message.answer("–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                                 reply_markup=get_back_keyboard())
            await state.set_state(SetupFSM.input_password)
            return

        if VERSION != "test":
            await save_and_send_video(user, message)

    t_left = expiration - datetime.now()  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è
    await message.answer(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
                         f"–î–æ –∫–æ–Ω—Ü–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞—Ä–æ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å: "
                         f"{t_left.seconds // 60 // 60} —á. {t_left.seconds // 60 % 60} –º–∏–Ω. {t_left.seconds % 60} —Å.",
                         reply_markup=get_saverec_keyboard())


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–µ–æ")
async def show_videos(message: types.Message):
    check_and_create_user(message.from_user.id)
    local_session = Session()
    user = local_session.query(Users).filter_by(id=message.from_user.id).first()
    if not user or user.access_level < 1:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ.")
        return

    videos = local_session.query(Videos).all()
    if not videos:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ.")
        return

    response = "–°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ:\n"
    for video in videos:
        response += f"/show_video_{video.id} - {video.description} ({video.timestamp})\n"
    await message.answer(response)


# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
@dp.message(F.text.regexp(r'^/show_video_(\d+)$'))
async def show_specific_video(message: types.Message):
    check_and_create_user(message.from_user.id)
    video_id = int(message.text.split("_")[-1])
    local_session = Session()
    video = local_session.query(Videos).filter_by(id=video_id).first()
    if not video:
        await message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await bot.send_video(chat_id=message.chat.id, video=video.video_id)


@dp.message(Command("set_id"))
async def cmd_set_id(message: types.Message):
    check_and_create_user(message.from_user.id)
    user_id = message.from_user.id
    local_session = Session()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = local_session.query(Users).filter_by(id=user_id).first()
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—Ä–æ–≤–Ω–µ–º –¥–æ—Å—Ç—É–ø–∞ 2 (–∞–¥–º–∏–Ω)
        new_user = Users(id=user_id, access_level=2)
        local_session.add(new_user)
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–æ 2 (–∞–¥–º–∏–Ω)
        user.access_level = 2

    local_session.commit()
    await message.answer(f"–í–∞—à ID: {user_id}\n–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ 2).")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    help_message += "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
    help_message += "/saverec - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ\n"
    await message.answer(help_message)


@dp.message(Command("add_court"))
async def cmd_add_court(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–∞:")
    await state.set_state(AddCourtFSM.input_court_name)


@dp.message(AddCourtFSM.input_court_name)
async def process_input_court_name(message: types.Message, state: FSMContext):
    court_name = message.text
    new_court = Courts(name=court_name, current_password=generate_password(), previous_password=generate_password(),
                       password_expiration_date=datetime.now() + timedelta(days=1))
    with Session() as local_session:
        local_session.add(new_court)
        local_session.commit()
    await message.answer(f"–ö–æ—Ä—Ç '{court_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await send_courts_list(message)
    await state.clear()


async def send_courts_list(message: types.Message):
    courts_list = Session().query(Courts).all()
    response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ä—Ç—ã:\n"
    response += "ID \\- –ù–∞–∑–≤–∞–Ω–∏–µ \\(–ü–∞—Ä–æ–ª—å\\)\n"
    for court in courts_list:
        response += f"`{court.id}` \\- {court.name} \\(`{court.current_password}`\\)\n"
    response += "\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ `/delete_court \\<ID –∫–æ—Ä—Ç–∞\\>`\\.\n"
    response += "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∫–æ—Ä—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ `/update_password \\<ID –∫–æ—Ä—Ç–∞\\>`\\."
    await message.answer(response, parse_mode="MarkdownV2")


@dp.message(Command("delete_court"))
async def cmd_delete_court(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("ID –∫–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
    court_id = parts[1]
    with Session() as local_session:
        found_court = local_session.query(Courts).filter_by(id=court_id).first()
        if not found_court:
            await message.answer("–ö–æ—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        local_session.delete(found_court)
        local_session.commit()
    await message.answer(f"–ö–æ—Ä—Ç —Å ID {court_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await send_courts_list(message)


@dp.message(Command("update_password"))
async def cmd_update_password(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("ID –∫–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
    court_id = parts[1]
    with Session() as local_session:
        found_court = local_session.query(Courts).filter_by(id=court_id).first()
        if not found_court:
            await message.answer("–ö–æ—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        found_court.current_password = generate_password()
        found_court.previous_password = found_court.current_password
        found_court.password_expiration_date = datetime.now() + timedelta(days=1)
        local_session.commit()
        await message.answer(f"–ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ç–∞ {found_court.name} —Å ID {court_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.\n"
                             f"–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `{found_court.current_password}`")
    await send_courts_list(message)


@dp.message(DeleteCourtFSM.input_court_id)
async def process_input_court_id(message: types.Message):
    court_id = message.text
    with Session() as local_session:
        found_court = local_session.query(Courts).filter_by(id=court_id).first()
        if not found_court:
            await message.answer("–ö–æ—Ä—Ç–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
        local_session.delete(found_court)
        local_session.commit()
    await message.answer(f"–ö–æ—Ä—Ç —Å ID {court_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    await send_courts_list(message)


@dp.message(Command("show_courts"))
async def cmd_show_courts(message: types.Message):
    await send_courts_list(message)


# –†–∞–±–æ—Ç–∞ —Å –∫–∞–º–µ—Ä–∞–º–∏
@dp.message(Command("show_cameras"))
async def cmd_show_cameras(message: types.Message):
    cameras_list = Session().query(Cameras).all()
    response = "–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä:\n"
    for camera in cameras_list:
        response += f"{camera.id} - {camera.name}\n"
    await message.answer(response)


# @dp.message(Command("add_camera"))
async def cmd_add_camera(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–µ—Ä—ã:")
    await AddCameraFSM.input_camera_name.set()


@dp.message(AddCameraFSM.input_camera_name)
async def process_input_camera_name(message: types.Message, state: FSMContext):
    camera_name = message.text
    new_camera = Cameras(name=camera_name)
    with Session() as local_session:
        local_session.add(new_camera)
        local_session.commit()
    await message.answer(f"–ö–∞–º–µ—Ä–∞ '{camera_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await send_cameras_list(message)
    await state.clear()


async def send_cameras_list(message: types.Message):
    cameras_list = Session().query(Cameras).all()
    response = "–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä:\n"
    for camera in cameras_list:
        response += f"/show_camera_{camera.id} - {camera.name}\n"
    await message.answer(response)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    with Session() as start_session:
        courts = start_session.query(Courts).all()
        if not courts:
            test_court = Courts(name="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ—Ä—Ç", current_password="qwe", previous_password="qwe",
                                password_expiration_date=datetime.now() - timedelta(days=1))
            start_session.add(test_court)
            start_session.commit()
    asyncio.run(main())
